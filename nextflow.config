// Singularity containter cache. Change this as appropriate
singularity {
	cacheDir = "/scratch/project/imos_mgd/julian/GIH_adaptive_sequencing/singularity_cache"
	runOptions ="--no-home"
	singularity.enabled = true
	singularity.autoMounts = true
	//runOptions = "--bind $PWD"
	//singularity.autoMounts = false
	//runOptions = "-B \"$launchDir\" $mounts.datadir $mounts.outdir"
}

// ensure that no user libraries get mounted into the container
process.containerOptions = "--no-home"
process.debug = true

env {
    PYTHONNOUSERSITE = 1
}

// Process settings. Set job scheduler if appropriate (SLURM, PBS e.g.)
// If your job scheduler has different queues/partitions for cpu and gpu, please also set them here
process {
	// ensure that no user libraries get mounted into the container
        //containerOptions = '--no-home'
	executor='slurm'
	clusterOptions = '--partition=general'
	//clusterOptions = '--exclude=v[1-4]'
	time = '6h'
	withName: 'porechop|minimap|flye|racon|medaka|aviary_recover' { 
		time = '21h'
	}
}

process {
	// Ignore all errors and continue the workflow
	errorStrategy = 'ignore'
}

// Default parameters. Commandline parameters will take priority over these
params {
        outdir = './results'
	ref_genome= '/scratch/project_mnt/S0114/julian/GIH_adaptive_sequencing/data/reference_genomes/GCF_009914755.1_T2T-CHM13v2.0_genomic.fna.gz'
	// ensure that users put genome in the above folder 
	skip_adaptive_sampling_metrics = false
	skip_porechop = false
	nanocomp_threads = 20
	porechop_args = ""
	porechop_threads = 48
	skip_extract_adaptive = false
	read_types_retain = "stop_receiving"
	minimap_threads = 48
	skip_remove_host_reads = false
	flye_args = "--meta"
	skip_assembly = false
	flye_threads = 48
	centrifuge_threads = 12
	skip_download_centrifuge_db = true
	skip_centrifuge = false
	centrifuge_db_remote = 'https://genome-idx.s3.amazonaws.com/centrifuge/nt_2018_3_3.tar.gz'
	centrifuge_db = '/scratch/project/imos_mgd/julian/GIH_adaptive_sequencing/data/resources/centrifuge_db'
	centrifuge_reference_tax_ID = "9606"
	skip_centrifuge_remove_contaminated = false 
	krona_db = '/scratch/project/imos_mgd/julian/GIH_adaptive_sequencing/data/resources/taxonomy.tab'
	skip_krona = false
	skip_polishing= false
	racon_threads = 48
	racon_nb = 4
	racon_args = "-m 8 -x -6 -g -8 -w 500"
	medaka_threads = 8
	//ensure the correct nedaka model is indicated below and matches the guppy basecalling model
	medaka_model = "r941_min_sup_g507"
	//medaka_model = "r1041_e82_400bps_sup_g615"
	whokaryote_threads = "48"
	skip_whokaryote = false
	skip_genomad = false
	skip_download_genomad_db = true
	genomad_db_remote = 'https://zenodo.org/records/10594875/files/genomad_db_v1.7.tar.gz'
  genomad_db = '/scratch/project/imos_mgd/julian/GIH_adaptive_sequencing/data/resources/genomad_db_1.7.0'
	aviary_threads = 48
	pplacer_threads = 48
	skip_aviary = false
	max_memory_aviary = 500
	checkm_db = "/scratch/project/imos_mgd/julian/GIH_adaptive_sequencing/data/resources/CheckM2_database"
	eggnog_db = "/scratch/project/imos_mgd/julian/GIH_adaptive_sequencing/data/resources/eggnog-mapper-data"
	gtdb_path = "/scratch/project/imos_mgd/julian/GIH_adaptive_sequencing/data/resources/gtdb/release214"
        //gtdb_path = "/scratch/project/imos_mgd/julian/GIH_adaptive_sequencing/data/resources/gtdb/release220"
	skip_quast= false
	quast_threads = 48
}

mounts {
        outdir = "-B \"`[[ \"${params.outdir}\" =~ ^/ ]] && echo ${params.outdir} || echo ${PWD}/${params.outdir}`\""
        //datadir = "-B \"`[[ \"${params.datadir}\" =~ ^/ ]] && echo ${params.datadir} || echo ${PWD}/${params.datadir}`\""
}

// Not generally user-modifiable !!!
process {
	withLabel: high_memory { memory = 200.GB }
	withLabel: very_high_memory { memory = 300.GB }
	withName: porechop { container = 'docker://quay.io/biocontainers/porechop:0.2.4--py310h30d9df9_3' }
	withName: extract_adaptive_readID { container = 'docker://quay.io/biocontainers/seqkit:2.4.0--h9ee0642_0' }
	withName: extract_adaptive_fastq { container = 'docker://quay.io/biocontainers/seqtk:1.3--h7132678_4' }
	withName: extract_adaptive_sampling_reads { container = 'docker://quay.io/biocontainers/seqtk:1.3--h7132678_4' }
	withName: compute_adaptive_sampling_metrics { container = 'docker://quay.io/biocontainers/nanocomp:1.17.0--pyhdfd78af_0' }
	withName: minimap { container = 'docker://julianzaugg/minimap_samtools_seqtk_image' }
	withName: flye { container = 'docker://quay.io/biocontainers/flye:2.9.2--py310h2b6aa90_1' }
	withName: racon { container = 'docker://vmurigneux/racon:1.4.9' }
	//withName: racon { container = 'docker://quay.io/biocontainers/racon:1.5.0--h21ec9f0_2' }
	withName: medaka { container = 'docker://quay.io/biocontainers/medaka:1.7.2--py38h6239ad4_1'}
	withName: centrifuge { container = 'docker://quay.io/biocontainers/centrifuge:1.0.4--hd03093a_0' }
	withName: remove_centrifuge_contaminated  { container = 'docker://quay.io/biocontainers/seqtk:1.3--h7132678_4' }
	//withName: quast { container = 'docker://quay.io/biocontainers/quast:5.2.0--py39pl5321h4e691d4_3' } 
	withName: krona { container = 'docker://quay.io/biocontainers/krona:2.8.1--pl5321hdfd78af_1'}
	withName: whokaryote { container = 'docker://quay.io/biocontainers/whokaryote:1.1.2--pyhdfd78af_0'}
	withName: genomad { container = 'docker://quay.io/biocontainers/genomad:1.7.0--pyhdfd78af_0' }
	withName: aviary_recover { container = '/scratch/project/imos_mgd/julian/GIH_adaptive_sequencing/data/resources/aviary/aviary_0.9.1.sif' }
	withName: quast { container = 'docker://quay.io/biocontainers/quast:5.2.0--py39pl5321h4e691d4_3' }
}

// Debug and report options
trace {
  enabled = true
  file = "${params.outdir}/trace.txt"
  overwrite = true
}
timeline {
  enabled = true
  file = "${params.outdir}/timeline.html"
  overwrite = true
}
report {
  enabled = true
  file = "${params.outdir}/report.html"
  overwrite = true
}
dag {
  enabled = true
  file = "${params.outdir}/flowchart_dag.svg"
  overwrite = true
}

manifest {
  name = ''
  author = 'Valentine Murigneux, Dean Basic'
  description = 'MET analysis pipeline'
  mainScript = 'main.nf'
  version = '0.1'
}

